syntax = "proto2";
package kvrpcpb;

import "metapb.proto";
import "errorpb.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

enum MessageType {
    CmdGet              = 0;
    CmdScan             = 1;
    CmdPrewrite         = 2;
    CmdCommit           = 3;
    CmdCleanup          = 4;
    CmdBatchGet         = 7;
    CmdBatchRollback    = 8;
    CmdScanLock         = 9; // Scan all orphan locks in a Region.
    CmdResolveLock      = 10; // Resolve all orphan locks belong to a transaction.
    CmdGC               = 11;
}

message LockInfo {
    optional bytes  primary_lock = 1;
    optional uint64 lock_version = 2 [(gogoproto.nullable) = false];
    optional bytes  key          = 3;
}

message KeyError {
    optional LockInfo locked    = 1; // Client should backoff or cleanup the lock then retry.
    optional string   retryable = 2 [(gogoproto.nullable) = false]; // Client may restart the txn. e.g write conflict.
    optional string   abort     = 3 [(gogoproto.nullable) = false]; // Client should abort the txn.
}

message Context {
    optional uint64             region_id    = 1 [(gogoproto.nullable) = false];
    optional metapb.RegionEpoch region_epoch = 2;
    optional metapb.Peer        peer         = 3;
    optional bool               read_quorum  = 4 [(gogoproto.nullable) = false];
}

message CmdGetRequest {
    optional bytes   key     = 1;
    optional uint64  version = 2 [(gogoproto.nullable) = false];
}

message CmdGetResponse {
    optional KeyError error = 1;
    optional bytes    value = 2;
}

message CmdScanRequest {
    optional bytes   start_key = 1;
    optional uint32  limit     = 2 [(gogoproto.nullable) = false];
    optional uint64  version   = 3 [(gogoproto.nullable) = false];
    optional bool    key_only  = 4 [(gogoproto.nullable) = false];
}

message KvPair {
    optional KeyError error = 1;
    optional bytes    key   = 2;
    optional bytes    value = 3;
}

message CmdScanResponse {
    repeated KvPair pairs = 1;
}

enum Op {
    Put  = 0;
    Del  = 1;
    Lock = 2;
}

message Mutation {
    optional Op    op    = 1 [(gogoproto.nullable) = false];
    optional bytes key   = 2;
    optional bytes value = 3;
}

message CmdPrewriteRequest {
    repeated Mutation mutations   = 1;
    // primary_lock_key
    optional bytes primary_lock   = 2;
    optional uint64 start_version = 3 [(gogoproto.nullable) = false];
    optional bool  fast_insert    = 4 [(gogoproto.nullable) = false];
}

message CmdPrewriteResponse {
    repeated KeyError errors = 1;
}

message CmdCommitRequest {
    optional uint64  start_version  = 1 [(gogoproto.nullable) = false];
    repeated bytes   keys           = 2;
    optional uint64  commit_version = 3 [(gogoproto.nullable) = false];
    optional bytes   binlog         = 4;
    optional bool    fast_insert    = 5 [(gogoproto.nullable) = false];
}

message CmdCommitResponse {
    optional KeyError error = 1;
}

message CmdBatchRollbackRequest {
    optional uint64 start_version = 1 [(gogoproto.nullable) = false];
    repeated bytes  keys          = 2;
}

message CmdBatchRollbackResponse {
    optional KeyError error = 1;
}

message CmdCleanupRequest {
    optional bytes   key           = 1;
    optional uint64  start_version = 2 [(gogoproto.nullable) = false];
}

message CmdCleanupResponse {
    optional KeyError error          = 1;
    optional uint64   commit_version = 2 [(gogoproto.nullable) = false]; // set this if the key is already committed
}

message CmdBatchGetRequest {
    repeated bytes  keys    = 1;
    optional uint64 version = 2 [(gogoproto.nullable) = false];
}

message CmdBatchGetResponse {
    repeated KvPair pairs = 1;
}

message CmdScanLockRequest {
    optional uint64 max_version = 1 [(gogoproto.nullable) = false];
}

message CmdScanLockResponse {
    optional KeyError error = 1;
    repeated LockInfo locks = 2;
}

message CmdResolveLockRequest {
    optional uint64 start_version  = 1 [(gogoproto.nullable) = false];
    // If the txn is rolled back, do not set it.
    optional uint64 commit_version = 2 [(gogoproto.nullable) = false];
}

message CmdResolveLockResponse {
    optional KeyError error = 1;
}

message CmdGCRequest {
    optional uint64 safe_point = 1 [(gogoproto.nullable) = false];
}

message CmdGCResponse {
    optional KeyError error = 1;
}

message Request {
    optional MessageType               type                   = 1 [(gogoproto.nullable) = false];
    optional Context                   context                = 2;
    optional CmdGetRequest             cmd_get_req            = 3;
    optional CmdScanRequest            cmd_scan_req           = 4;
    optional CmdPrewriteRequest        cmd_prewrite_req       = 5;
    optional CmdCommitRequest          cmd_commit_req         = 6;
    optional CmdCleanupRequest         cmd_cleanup_req        = 7;
    optional CmdBatchGetRequest        cmd_batch_get_req      = 10;
    optional CmdBatchRollbackRequest   cmd_batch_rollback_req = 11;
    optional CmdScanLockRequest        cmd_scan_lock_req      = 12;
    optional CmdResolveLockRequest     cmd_resolve_lock_req   = 13;
    optional CmdGCRequest              cmd_gc_req             = 14;
}

message Response {
    optional MessageType                type                    = 1 [(gogoproto.nullable) = false];
    optional errorpb.Error              region_error            = 2;
    optional CmdGetResponse             cmd_get_resp            = 3;
    optional CmdScanResponse            cmd_scan_resp           = 4;
    optional CmdPrewriteResponse        cmd_prewrite_resp       = 5;
    optional CmdCommitResponse          cmd_commit_resp         = 6;
    optional CmdCleanupResponse         cmd_cleanup_resp        = 7;
    optional CmdBatchGetResponse        cmd_batch_get_resp      = 10;
    optional CmdBatchRollbackResponse   cmd_batch_rollback_resp = 11;
    optional CmdScanLockResponse        cmd_scan_lock_resp      = 12;
    optional CmdResolveLockResponse     cmd_resolve_lock_resp   = 13;
    optional CmdGCResponse              cmd_gc_resp             = 14;
}
